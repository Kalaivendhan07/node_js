ExcelJS is a powerful library for reading, writing, and manipulating Excel files (both .xlsx and .xls formats) in Node.js. It offers a comprehensive API to work with Excel documents, including creating new files, modifying existing ones, and handling various cell types and styles.

Key Features of ExcelJS
Read and Write Excel Files: Create new Excel files or modify existing ones.
Manage Worksheets: Add, remove, and modify worksheets.
Cell Formatting: Apply various styles such as fonts, colors, borders, and alignment.
Data Types: Handle different data types including strings, numbers, dates, and formulas.
Formulas: Set formulas in cells.
Data Validation: Apply data validation rules to cells.
Rich Text: Format parts of a cell's text differently.

installation
npm install exceljs

1. Creating a New Workbook and Worksheet
const ExcelJS = require('exceljs');

// Create a new workbook and add a worksheet
const workbook = new ExcelJS.Workbook();
const worksheet = workbook.addWorksheet('My Sheet');

// Add some data to the worksheet
worksheet.addRow(['Name', 'Age', 'Location']);
worksheet.addRow(['John Doe', 30, 'New York']);
worksheet.addRow(['Jane Smith', 25, 'Los Angeles']);

// Save the workbook to a file
workbook.xlsx.writeFile('example.xlsx')
    .then(() => console.log('File saved successfully!'))
    .catch(err => console.error('Error saving file:', err));


2. Reading an Existing Excel File
const ExcelJS = require('exceljs');

// Load an existing workbook
const workbook = new ExcelJS.Workbook();

workbook.xlsx.readFile('example.xlsx')
    .then(() => {
        const worksheet = workbook.getWorksheet('My Sheet');
        
        // Read data from the worksheet
        worksheet.eachRow((row, rowNumber) => {
            console.log(`Row ${rowNumber}: ${row.values}`);
        });
    })
    .catch(err => console.error('Error reading file:', err));

3.Styling Cells
const ExcelJS = require('exceljs');

// Create a new workbook and worksheet
const workbook = new ExcelJS.Workbook();
const worksheet = workbook.addWorksheet('Styled Sheet');

// Add data to the worksheet
const headerRow = worksheet.addRow(['Name', 'Age', 'Location']);

// Style header row
headerRow.font = { bold: true };
headerRow.alignment = { horizontal: 'center' };
headerRow.fill = {
    type: 'pattern',
    pattern: 'solid',
    fgColor: { argb: 'FFFF00' } // Yellow background
};

// Add some data
worksheet.addRow(['John Doe', 30, 'New York']);
worksheet.addRow(['Jane Smith', 25, 'Los Angeles']);

// Save the workbook to a file
workbook.xlsx.writeFile('styled.xlsx')
    .then(() => console.log('Styled file saved successfully!'))
    .catch(err => console.error('Error saving file:', err));


4.Setting Formulas
const ExcelJS = require('exceljs');

// Create a new workbook and worksheet
const workbook = new ExcelJS.Workbook();
const worksheet = workbook.addWorksheet('Formulas Sheet');

// Add some data and a formula
worksheet.addRow([5, 10, { formula: 'A1 + B1', result: 15 }]);

// Save the workbook to a file
workbook.xlsx.writeFile('formulas.xlsx')
    .then(() => console.log('File with formulas saved successfully!'))
    .catch(err => console.error('Error saving file:', err));


5.Applying Data Validation
const ExcelJS = require('exceljs');

// Create a new workbook and worksheet
const workbook = new ExcelJS.Workbook();
const worksheet = workbook.addWorksheet('Validation Sheet');

// Add data with data validation
worksheet.addRow(['Name', 'Age']);
worksheet.addRow(['John Doe', 30]);

// Apply data validation to the Age column
worksheet.getCell('B2').dataValidation = {
    type: 'whole',
    operator: 'between',
    formula1: 0,
    formula2: 100,
    showErrorMessage: true,
    errorTitle: 'Invalid input',
    errorMessage: 'Age must be between 0 and 100'
};

// Save the workbook to a file
workbook.xlsx.writeFile('validation.xlsx')
    .then(() => console.log('File with data validation saved successfully!'))
    .catch(err => console.error('Error saving file:', err));


Explanation of Key Methods and Properties::::::

Workbook: Represents the Excel file. You can add worksheets, read/write data, and save the file.

Worksheet: Represents a sheet in the workbook. You can add rows, set cell values, and apply styles.

addWorksheet(name): Adds a new worksheet with the specified name.

addRow(values): Adds a row to the worksheet. Values can be arrays or objects.

getCell(address): Gets a cell by its address (e.g., 'A1').

dataValidation: Defines rules for validating cell input.

font: Defines the font style (e.g., bold, italic).

alignment: Defines the text alignment (e.g., center, right).

fill: Defines the cell background color.

formula: Sets a formula in a cell.

result: Provides the result of a formula for display purposes.



Inserting a Row
worksheet.insertRow(2, ['Jane Doe', 28, 'San Francisco']); // Insert a row at position 2


Modifying a Row

const row = worksheet.getRow(2); // Get the row at position 2
row.getCell(1).value = 'Updated Name'; // Update the value of the first cell
row.commit(); // Commit changes

Example with Different Data Types

worksheet.getCell('A2').value = 100; // Set a number
worksheet.getCell('B2').value = new Date(); // Set a date
worksheet.getCell('C2').value = { formula: 'A2 + 10', result: 110 }; // Set a formula


Font Styling
worksheet.getCell('A1').font = { name: 'Arial', bold: true, size: 14 }; // Set font properties

Cell Fill (Background Color)
worksheet.getCell('A1').fill = {
    type: 'pattern',
    pattern: 'solid',
    fgColor: { argb: 'FFFF00' } // Yellow background
};

Cell Alignment
worksheet.getCell('A1').alignment = { horizontal: 'center', vertical: 'middle' }; // Center align text

Setting Formulas
worksheet.getCell('D2').value = { formula: 'SUM(B2:C2)', result: 130 }; // Sum formula
worksheet.getCell('E2').value = { formula: 'A2 * B2', result: 3000 }; // Multiplication formula


Applying Data Validation
worksheet.getCell('B3').dataValidation = {
    type: 'whole',
    operator: 'between',
    formula1: 0,
    formula2: 100,
    showErrorMessage: true,
    errorTitle: 'Invalid input',
    errorMessage: 'Value must be between 0 and 100'
};


Example with Dropdown Validation
worksheet.getCell('C3').dataValidation = {
    type: 'list',
    formula1: '"Option1,Option2,Option3"',
    showErrorMessage: true,
    errorTitle: 'Invalid choice',
    errorMessage: 'Please select a value from the list'
};

Applying Rich Text
worksheet.getCell('A4').value = {
    richText: [
        { text: 'Hello ', font: { bold: true } },
        { text: 'World', font: { italic: true } }
    ]
};


